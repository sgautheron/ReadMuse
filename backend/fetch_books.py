import requests
import sqlite3
import time

# ‚úÖ Chemin vers la base de donn√©es
DATABASE_PATH = "data/bdd_readmuse.db"

# üîπ Nombre max de r√©sultats par page (on r√©duit √† 20 pour √©viter erreurs 500)
RESULTS_PER_PAGE = 20  

# üéØ Genres cibl√©s (th√®mes populaires sur Open Library)
GENRES = [
    "science_fiction", "fantasy", "mystery", "romance",
    "historical_fiction", "horror", "biography", "self_help",
    "poetry", "children", "young_adult", "thriller", "philosophy"
]

# ‚úÖ Header pour √©viter les blocages serveurs
HEADERS = {
    "User-Agent": "Mozilla/5.0 (compatible; ReadMuseBot/1.0; +http://readmuse.fr)"
}

def fetch_book_details(olid):
    """ üîç R√©cup√®re les d√©tails d'un livre via son OLID : r√©sum√© et pages """
    url = f"https://openlibrary.org/works/{olid}.json"
    
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        book = response.json()

        # R√©sum√©
        resume = book.get("description", {})
        if isinstance(resume, dict):
            resume = resume.get("value", "")
        elif isinstance(resume, str):
            resume = resume
        else:
            resume = ""

        # üîç Pour r√©cup√©rer une √©dition et en extraire les pages
        editions_url = f"https://openlibrary.org/works/{olid}/editions.json?limit=1"
        pages = "Inconnu"
        try:
            res_ed = requests.get(editions_url, headers=HEADERS)
            res_ed.raise_for_status()
            editions = res_ed.json().get("entries", [])
            if editions:
                pages = editions[0].get("number_of_pages", "Inconnu")
        except requests.RequestException:
            pass

        return {
            "Resume": resume.strip() if resume else "R√©sum√© non disponible",
            "Nombre_Pages": pages
        }
    except requests.RequestException:
        return {"Resume": "R√©sum√© non disponible", "Nombre_Pages": "Inconnu"}

def fetch_books_by_subject(subject, limit=RESULTS_PER_PAGE):
    """ üìö R√©cup√®re les livres populaires d‚Äôun sujet Open Library """
    url = f"https://openlibrary.org/subjects/{subject}.json?limit={limit}&sort=edition_count"
    
    try:
        response = requests.get(url, headers=HEADERS)
        response.raise_for_status()
        books = response.json().get("works", [])
    except requests.RequestException as e:
        print(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des livres ({subject}): {e}")
        return []

    book_data = []
    for book in books:
        olid = book.get("key", "").replace("/works/", "")
        details = fetch_book_details(olid)

        book_data.append({
            "Titre": book.get("title", "N/A"),
            "Auteur": ", ".join([a["name"] for a in book.get("authors", [{"name": "Inconnu"}])]),
            "Genre": subject.replace("_", " ").title(),
            "Date_Publication": book.get("first_publish_year", ""),
            "Editeur": "Inconnu",
            "Resume": details["Resume"],
            "Nombre_Pages": details["Nombre_Pages"],
            "URL_Couverture": f"https://covers.openlibrary.org/b/id/{book.get('cover_id', '')}-L.jpg" if book.get("cover_id") else "",
        })

    print(f"‚úÖ {len(book_data)} livres r√©cup√©r√©s pour le sujet '{subject}'")
    return book_data

def insert_books(books):
    if not books:
        print("‚ö†Ô∏è Aucun livre √† ins√©rer.")
        return
    
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    cursor.executemany("""
        INSERT OR IGNORE INTO Livres 
        (Titre, Auteur, Genre, Date_Publication, Editeur, Resume, Nombre_Pages, URL_Couverture)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, [(b["Titre"], b["Auteur"], b["Genre"], b["Date_Publication"], b["Editeur"], 
           b["Resume"], b["Nombre_Pages"], b["URL_Couverture"]) for b in books])

    conn.commit()
    conn.close()
    print(f"üìö {len(books)} livres ins√©r√©s avec succ√®s dans la base !")

if __name__ == "__main__":
    all_books = []
    
    for genre in GENRES:
        print(f"üìö R√©cup√©ration des livres pour le genre : {genre}")
        books = fetch_books_by_subject(genre)
        all_books.extend(books)
        time.sleep(1)  # üîÑ Pause pour √©viter d‚Äô√™tre bloqu√©

    if all_books:
        insert_books(all_books)
        print(f"üéâ Base de donn√©es mise √† jour avec {len(all_books)} livres populaires !")
    else:
        print("‚ö†Ô∏è Aucun livre ajout√©.")
